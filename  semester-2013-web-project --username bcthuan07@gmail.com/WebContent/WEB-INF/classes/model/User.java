package model;

// Generated 25-Nov-2013 20:54:41 by Hibernate Tools 4.0.0

import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.LazyCollection;
import org.hibernate.annotations.LazyCollectionOption;

/**
 * User generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "user")
public class User implements java.io.Serializable {

	private Integer userId;
	private String username;
	private byte[] password;
	private PaymentMethod paymentMethod;
	private int phoneNumber;
	private String firstName;
	private String lastName;
	private String email;
	private boolean permission;
	private boolean gender;
	private Date datecreated;
	private byte[] salt;
	private Set<UserOrder> userOrders = new HashSet<UserOrder>(0);
	private Set<UserAddressHistory> userAddressHistories = new HashSet<UserAddressHistory>(
			0);
	private Set<Feedback> feedbacks = new HashSet<Feedback>(0);

	public User() {
	}

	public User(Integer userId, String username, byte[] password,
			PaymentMethod paymentMethod, int phoneNumber, String firstName,
			String lastName, String email, boolean permission, boolean gender,
			Date datecreated, byte[] salt, Set<UserOrder> userOrders,
			Set<UserAddressHistory> userAddressHistories,
			Set<Feedback> feedbacks) {
		super();
		this.userId = userId;
		this.username = username;
		this.password = password;
		this.paymentMethod = paymentMethod;
		this.phoneNumber = phoneNumber;
		this.firstName = firstName;
		this.lastName = lastName;
		this.email = email;
		this.permission = permission;
		this.gender = gender;
		this.datecreated = datecreated;
		this.salt = salt;
		this.userOrders = userOrders;
		this.userAddressHistories = userAddressHistories;
		this.feedbacks = feedbacks;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "user_id", unique = true, nullable = false)
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@ManyToOne
	@LazyCollection(LazyCollectionOption.FALSE)
	@JoinColumn(name = "payment_method_id", nullable = false)
	public PaymentMethod getPaymentMethod() {
		return this.paymentMethod;
	}

	public void setPaymentMethod(PaymentMethod paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	@Column(name = "phone_number", nullable = false)
	public int getPhoneNumber() {
		return this.phoneNumber;
	}

	public void setPhoneNumber(int phoneNumber) {
		this.phoneNumber = phoneNumber;
	}

	@Column(name = "first_name", nullable = false)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "last_name", nullable = false)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "email", nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "permission", nullable = false)
	public boolean getPermission() {
		return this.permission;
	}

	public void setPermission(boolean permission) {
		this.permission = permission;
	}

	@Column(name = "gender", nullable = false)
	public boolean getGender() {
		return this.gender;
	}

	public void setGender(boolean gender) {
		this.gender = gender;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "datecreated", nullable = false, length = 19)
	public Date getDatecreated() {
		return this.datecreated;
	}

	public void setDatecreated(Date datecreated) {
		this.datecreated = datecreated;
	}

	@OneToMany(mappedBy = "user")
	@LazyCollection(LazyCollectionOption.FALSE)
	public Set<UserOrder> getUserOrders() {
		return this.userOrders;
	}

	public void setUserOrders(Set<UserOrder> userOrders) {
		this.userOrders = userOrders;
	}

	@OneToMany(mappedBy = "user")
	@LazyCollection(LazyCollectionOption.FALSE)
	public Set<UserAddressHistory> getUserAddressHistories() {
		return this.userAddressHistories;
	}

	public void setUserAddressHistories(
			Set<UserAddressHistory> userAddressHistories) {
		this.userAddressHistories = userAddressHistories;
	}

	@OneToMany(mappedBy = "user")
	@LazyCollection(LazyCollectionOption.FALSE)
	public Set<Feedback> getFeedbacks() {
		return this.feedbacks;
	}

	public void setFeedbacks(Set<Feedback> feedbacks) {
		this.feedbacks = feedbacks;
	}

	@Column(name = "username", nullable = false)
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "password", nullable = false)
	public byte[] getPassword() {
		return password;
	}

	public void setPassword(byte[] password) {
		this.password = password;
	}
	
	@Column(name="salt",nullable=false)
	public byte[] getSalt() {
		return salt;
	}

	public void setSalt(byte[] salt) {
		this.salt = salt;
	}

	@Override
	public String toString() {
		return "User [userId=" + userId + ", username=" + username
				+ ", password=" + Arrays.toString(password) + ", phoneNumber="
				+ phoneNumber + ", firstName=" + firstName + ", lastName="
				+ lastName + ", email=" + email + ", permission=" + permission
				+ ", gender=" + gender + ", datecreated=" + datecreated + "]";
	}

}
